(self.webpackChunkvl_website=self.webpackChunkvl_website||[]).push([[826],{826:module=>{eval('{\r\n/*  Author: Ryan Taylor Montgomery\r\n *  Date: May 27th 2019\r\n *  License: MIT License\r\n *\r\n *\tCopyright (c) 2019 Vault Lambda LLC\r\n *\r\n *\tPermission is hereby granted, free of charge, to any person obtaining a copy\r\n *\tof this software and associated documentation files (the "Software"), to deal\r\n *\tin the Software without restriction, including without limitation the rights\r\n *\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *\tcopies of the Software, and to permit persons to whom the Software is\r\n *\tfurnished to do so, subject to the following conditions:\r\n *\r\n *\tThe above copyright notice and this permission notice shall be included in all\r\n *\tcopies or substantial portions of the Software.\r\n *\r\n *\tTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n *\tSOFTWARE.\r\n * \r\n */\r\nconst grul = new (function () {\r\n    /*  Function Name: this.docs\r\n     *  Description: Retrieves api information from source\r\n     */\r\n    this.docs = function () {\r\n        let grulref = this;\r\n        let Utilities = Object.keys(this);\r\n        let source = this.constructor.toString();\r\n        const regex = /\\/\\*?(?:\\t|\\ |\\r|\\n)*?Function\\ Name:(?:.|\\r|\\n)*?this\\.([a-zA-Z0-9]*)(?:.|\\r|\\n)*?Description:((?:.|\\r|\\n)*?)\\*\\//gmi;\r\n        let m;\r\n        let funcDetail = {};\r\n        while ((m = regex.exec(source)) !== null) {\r\n            // This is necessary to avoid infinite loops with zero-width matches\r\n            if (m.index === regex.lastIndex) {\r\n                regex.lastIndex++;\r\n            }\r\n\r\n            // The result can be accessed through the `m`-variable.\r\n            funcDetail[m[1]] = {\r\n                "description": m[2]\r\n            };\r\n        }\r\n        let docs = Utilities.map(function (key) {\r\n            return {\r\n                name: key,\r\n                args: grulref.funcArgs(grul[key]),\r\n                details: (key in funcDetail ? funcDetail[key] : { "description": "No description provided" })\r\n            };\r\n        });\r\n        return docs;\r\n    };\r\n    /*  Function Name: this.clone\r\n     *  Description: Clones data (breaking attachment to existing datasets)\r\n     */\r\n    this.clone = function (obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    };\r\n    /*  Function Name: this.funcArgs\r\n     *  Description: Retrieves functions arguments given a function definition\r\n     */\r\n    this.funcArgs = function (func) {\r\n        return (func + "")\r\n            .replace(/[/][/].*$/mg, "")\r\n            .replace(/\\s+/g, "")\r\n            .replace(/[/][*][^/*]*[*][/]/g, "")\r\n            .split("){", 1)[0].replace(/^[^(]*[(]/, "")\r\n            .replace(/=[^,]+/g, "")\r\n            .split(",").filter(Boolean);\r\n    };\r\n    /*  Function Name: this.executeLogic\r\n     *  Description: Executes logic of lambda depending on passed structure\r\n     */\r\n    this.executeLogic = function (logicController, location, patternIndex, aData, historicalTypePath, historicalLiteralPath, historicalObjectPath, initial) {\r\n        var logic = logicController;\r\n        var continueTraversal;\r\n        if (logic.constructor === Array) {\r\n            if (logic[patternIndex].constructor === Object) {\r\n                continueTraversal = location in logic[patternIndex] ? logic[patternIndex][location](aData, historicalTypePath, historicalLiteralPath, historicalObjectPath, initial) : true;\r\n            }\r\n            else {\r\n                continueTraversal = logic[patternIndex](aData, historicalTypePath, historicalLiteralPath, historicalObjectPath, initial);\r\n            }\r\n        }\r\n        else if (logic.constructor === Object) {\r\n            continueTraversal = location in logic ? logic[location](aData, historicalTypePath, historicalLiteralPath, historicalObjectPath, initial) : true;\r\n        }\r\n        else {\r\n            continueTraversal = logic(aData, historicalTypePath, historicalLiteralPath, historicalObjectPath, initial);\r\n        }\r\n        return continueTraversal;\r\n    };\r\n    /*  Variable Name: this.typeExtensions\r\n     *  Description: This variable holds a traversal map\r\n     */\r\n    this.typeExtensions = {\r\n        "Array": {\r\n            type: Array,\r\n            enumerators: () => {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n    /*  Function Name: this.extend\r\n     *  Description: This function configures a type extension for the enumerator specified\r\n     */\r\n    this.extend = function (type, enumerator) {\r\n        this.typeExtensions[type.name] = {\r\n            type: type,\r\n            enumerators: (enumerator.constructor === Array ? enumerator : [enumerator])\r\n        };\r\n    }\r\n    //Recursive Helper Functions\r\n    /*\tFunction Name: this.pluck\r\n     *\tDescription: This function traverses data given a path (array of literal traversals in order)\r\n     */\r\n    this.pluck = function (data, path, set = null) {\r\n        if (path.length > 1) {\r\n            return this.pluck(data[path[0]], path.slice(1), set);\r\n        }\r\n        else if (path.length === 0) {\r\n            if (set === null) {\r\n                return data;\r\n            }\r\n            else {\r\n                data = set;\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            if (set === null) {\r\n                return data[path[0]];\r\n            }\r\n            else {\r\n                data[path[0]] = set;\r\n                return data[path[0]];\r\n            }\r\n        }\r\n\r\n    };\r\n    /* \tFunction Name: this.pathExists\r\n     *\tDescription: This function checks to see if given path exists in a set\r\n     */\r\n    this.pathExists = function (data, bindpath, curpath = []) {\r\n        let isEqual = this.arrEquals(bindpath, curpath) && bindpath.length === curpath.length;\r\n        if (!isEqual) {\r\n            curpath.push(bindpath[curpath.length]);\r\n        }\r\n        try {\r\n            if (this.pluck(data, curpath) !== undefined) {\r\n                if (isEqual === true) {\r\n                    return true;\r\n                }\r\n                return this.pathExists(data, bindpath, curpath);\r\n            }\r\n            else {\r\n                return bindpath.slice(curpath.length - 1);\r\n            }\r\n        }\r\n        catch (exception) {\r\n            return bindpath.slice(curpath.length - 1);\r\n        }\r\n    };\r\n    /*   Function Name: this.scaffold\r\n     *   Description: This function constructs a blank incoming typed item\r\n     */\r\n    this.scaffold = function (input) {\r\n        if (input.constructor === Object) {\r\n            return {};\r\n        }\r\n        else if (input.constructor === Array) {\r\n            return [];\r\n        }\r\n        else {\r\n            return input;\r\n        }\r\n    };\r\n    /*  Function Name: this.isPrimitive\r\n     *  Description: This function determines whether or not the argument is a primitive type in javascript\r\n     */\r\n    this.isPrimitive = function (arg) {\r\n        var type = typeof arg;\r\n        return arg === null || (type !== "object" && type !== "function");\r\n    };\r\n    /*\tFunction Name: this.arrEquals\r\n     *\tDescription: This function iterates through array elements to check equality\r\n     */\r\n    this.arrEquals = function (arr1, arr2) {\r\n        if (arr1.length !== arr2.length) {\r\n            return false;\r\n        }\r\n        for (let i = parseInt(arr1.length); i--;) {\r\n            if (arr1[i] !== arr2[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /*  Variable Name: this.accessMap\r\n     *  Description: This variable holds references to all objects that have been accessed via isCircular to remove __accessed__ key for later use\r\n     */\r\n    this.accessMap = {};\r\n    /*  Function Name: this.clearAccessMap\r\n     *  Description: This function clears an access map utilized by grul to halt at circular references.\r\n     */\r\n    this.clearAccessMap = function () {\r\n        Object.keys(this.accessMap).forEach(key => {\r\n            delete this.accessMap[key].__accessed__;    //clean up temporary member on accessed object\r\n            delete this.accessMap[key];                 //clean up temporary member on access map\r\n        });\r\n    };\r\n    /*  Function Name: this.isCircular\r\n     *  Description: This function determines given a dataset whether or not that traversed path is circular in nature\r\n     */\r\n    this.isCircular = function (data) {\r\n        if (this.isPrimitive(data)) {\r\n            return false;\r\n        }\r\n        else {\r\n            if ("__accessed__" in data && data.__accessed__) {\r\n                return true;\r\n            }\r\n            let accessMapKey = Object.keys(this.accessMap).length;\r\n            this.accessMap[accessMapKey] = data;\r\n            data.__accessed__ = true;\r\n            return false;\r\n        }\r\n    };\r\n    //Recursive Lambda\'s\r\n    /*  Function Name: this.atHierarchy\r\n     *  Description: This function traverses any static or dynamic template hierarchy executing any head, tail logic to restructure a 2 dimensional JSON set\r\n     *              into the defined hierarchical set and grouping rows by a unique dynamically generated head key\r\n     */\r\n    this.atHierarchy = function (data, hierarchy, historicalTypePath = [], historicalLiteralPath = [], root = this.scaffold(hierarchy)) {\r\n        if (hierarchy.constructor === Array) {\r\n            hierarchy.forEach((template) => {\r\n                let compound = {}; // defines data/hierarchy/path to be set for next \r\n                let heads = []; // defines head which generates hierarchical compound key\r\n                let tails = []; // defines tails which generates hierarchical values based on previous recursive action\r\n                let branches = []; // defined branches which reflect hierarchical child slots\r\n                let rHierarchy = template.constructor === Function ? template(data, historicalTypePath, historicalLiteralPath, hierarchy) : template;\r\n                let out = this.scaffold(rHierarchy); // defines scaffolding for template to be cloned into a segment instance\r\n                //build branches\r\n                this.atEvery(rHierarchy, (segmentInput, typePath, literalPath) => {\r\n                    if (segmentInput === null) {\r\n                        return false;\r\n                    }\r\n\r\n                    if (segmentInput.constructor === Array) {\r\n                        let segmentMap = {\r\n                            "segmentTypePath": typePath,\r\n                            "segmentLiteralPath": literalPath,\r\n                            "hierarchy": segmentInput\r\n                        };\r\n                        branches.push(segmentMap);\r\n                        this.pluck(out, literalPath, []);\r\n                        return false;\r\n                    }\r\n                    else if (segmentInput.constructor === Object && "head" in segmentInput && segmentInput.head.constructor === Function) {\r\n                        let segmentMap = {\r\n                            "segmentTypePath": typePath,\r\n                            "segmentLiteralPath": literalPath,\r\n                            "map": segmentInput.head\r\n                        };\r\n                        heads.push(segmentMap);\r\n                        this.pluck(out, segmentMap.segmentLiteralPath, "");\r\n                        return false;\r\n                    }\r\n                    else if (segmentInput.constructor === Object && "tail" in segmentInput && segmentInput.tail.constructor === Function) {\r\n                        let segmentMap = {\r\n                            "segmentTypePath": typePath,\r\n                            "segmentLiteralPath": literalPath,\r\n                            "map": segmentInput.tail\r\n                        };\r\n                        tails.push(segmentMap);\r\n                        this.pluck(out, segmentMap.segmentLiteralPath, "");\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        this.pluck(out, literalPath, this.scaffold(segmentInput));\r\n                    }\r\n                });\r\n                //fill segments\r\n                data.forEach((row) => {\r\n                    let segment = this.clone(out);\r\n                    let compoundKey = "";\r\n                    //fill segment with head results\r\n                    heads.forEach((head) => {\r\n                        let value = head.map(row,\r\n                            historicalTypePath.concat(head.segmentTypePath),\r\n                            historicalLiteralPath.concat(head.segmentLiteralPath));\r\n                        let set = this.pluck(segment, head.segmentLiteralPath, value);\r\n                        segment = head.segmentLiteralPath.length === 0 ? set : segment;\r\n                        compoundKey += JSON.stringify(value);\r\n                    });\r\n                    /* Future Recursively Enumerable Hierarchy Updates\r\n                    this.atPattern(segment,["head"],{"head":(data,htp,hlp)=>{\r\n                        Object.keys(this.accessMap).forEach(key=>{\r\n                            delete this.accessMap[key].__accessed__;    //clean up temporary member on accessed object\r\n                            delete this.accessMap[key];                 //clean up temporary member on access map\r\n                        });\r\n                        this.atHierarchy([row],segment,historicalTypePath.concat(htp),historicalLiteralPath.concat(hlp),root);\r\n                    }});\r\n                    */\r\n                    if (compoundKey in compound) {\r\n                        compound[compoundKey].rows.push(row);\r\n                    }\r\n                    else {\r\n                        compound[compoundKey] = {\r\n                            rows: [row],\r\n                            branches: branches,\r\n                            segment: segment\r\n                        };\r\n                    }\r\n                });\r\n                //fill segment with tail results\r\n                Object.keys(compound).forEach((key) => {\r\n                    let parent = this.pluck(root, historicalLiteralPath);\r\n                    parent.push(compound[key].segment);\r\n                    let typePath = historicalTypePath.concat(out.constructor);\r\n                    let literalPath = historicalLiteralPath.concat([parent.length - 1]);\r\n                    compound[key].branches.forEach((branch) => {\r\n                        let nTypePath = typePath.concat(branch.segmentTypePath);\r\n                        let nLiteralPath = literalPath.concat(branch.segmentLiteralPath);\r\n                        this.atHierarchy(compound[key].rows, branch.hierarchy, nTypePath, nLiteralPath, root);\r\n                    });\r\n                    tails.forEach((tail) => {\r\n                        this.pluck(compound[key].segment, tail.segmentLiteralPath, tail.map(\r\n                            compound[key].rows,\r\n                            historicalTypePath.concat(compound[key].segmentTypePath),\r\n                            historicalLiteralPath.concat(compound[key].segmentLiteralPath),\r\n                            rHierarchy,\r\n                            branches\r\n                        ));\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            let tails = [];\r\n            this.atEvery(hierarchy, (input, htp, hlp) => {\r\n                if (input.constructor === Array) {\r\n                    this.pluck(root, hlp, this.scaffold(input));\r\n                    this.atHierarchy(data, input, htp, hlp, root);\r\n                    return false;\r\n                }\r\n                else if (input.constructor === Object && "head" in input && input.head.constructor === Function) {\r\n                    this.pluck(root, hlp, input.head(data, htp, hlp, hierarchy));\r\n                    return false;\r\n                }\r\n                else if (input.constructor === Object && "tail" in input && input.tail.constructor === Function) {\r\n                    tails.push({\r\n                        segmentTypePath: htp,\r\n                        segmentLiteralPath: hlp,\r\n                        map: input.tail\r\n                    });\r\n                    this.pluck(root, hlp, "");\r\n                    return false;\r\n                }\r\n                else {\r\n                    this.pluck(root, hlp, this.scaffold(input));\r\n                }\r\n            })\r\n            tails.forEach((tail) => {\r\n                this.pluck(root, tail.segmentLiteralPath, tail.map(data, tail.segmentTypePath, tail.segmentLiteralPath, hierarchy));\r\n            });\r\n        }\r\n        return root;\r\n    };\r\n    /*  Function Name: this.atSubdivision\r\n     *  Description: This function subdivides any 2 dimensional array into a linked tree based on the number of subdivisions specified, providing the user with\r\n     *              a function at each subdivisions for making customizations to the subdivided area\r\n     */\r\n    this.atSubdivision = function (data, subdivisions = 2, logic, historicalTypePath = [], historicalLiteralPath = [], rootData = data) {\r\n        if (data.length === 1) {\r\n            let ntp = historicalTypePath.concat([Array]);\r\n            let nlp = historicalLiteralPath.concat([0]);\r\n            return data[0];\r\n        }\r\n        else {\r\n            let subdivision = new Array(subdivisions).fill(null);\r\n            let ntp = historicalTypePath.concat([Array, Object]);\r\n            subdivision = subdivision.map((blank, index) => {\r\n                let nlp = historicalLiteralPath.concat([index, "group"]);\r\n                return this.atSubdivision(data.slice(index * (data.length / subdivisions), (index + 1) * (data.length / subdivisions)), subdivisions, logic, ntp, nlp);\r\n            });\r\n            let subdivisionGroup = { group: subdivision };\r\n            logic(subdivisionGroup, historicalTypePath, historicalLiteralPath)\r\n            return subdivisionGroup;\r\n        }\r\n    };\r\n    /*  Function Name: this.atStructure\r\n     *  Description: This function traverses any multidimensional set and modifies the existing path structure (metaPath) to the specified desired path structure\r\n     */\r\n    this.atStructure = function (data, metaPath, logic, relativity = 0, historicalTypePath = [], historicalLiteralPath = [], rootData = data) {\r\n        /* [{... children:[{...}]}] \r\n         * oldMetaPath => ["children",Array]\r\n         * newMetaPath => ["children",Object]\r\n         * keyPaths => []\r\n         */\r\n    };\r\n    /*  Function Name: this.atSegment\r\n     *  Description: This function traverses a multidimensional set for the existence of the metaPath starting from the historicalLiteralPath, until it finds the\r\n     *               next existence of metaPath, or the ends are primitive and returns a shallow copy\r\n     */\r\n    this.atSegment = function (data, metaPath, logic, relativity = 0, historicalTypePath = [], historicalLiteralPath = [], rootData = data) {\r\n        let include, exclude, depth, lag;\r\n        if (metaPath.constructor === Object) {\r\n            include = metaPath.include;\r\n            exclude = metaPath.exclude;\r\n        }\r\n        else if (metaPath.constructor === Array) {\r\n            include = metaPath;\r\n        }\r\n        if (relativity.constructor === Array) {\r\n            depth = relativity[0] || 1;\r\n            lag = relativity[1] || 0;\r\n        }\r\n        else if (relativity.constructor === Object) {\r\n            depth = relativity.depth || 0;\r\n            lag = relativity.lag || 0;\r\n        }\r\n        else {\r\n            depth = relativity + 1;\r\n            lag = 0;\r\n        }\r\n        let start = this.pluck(data, historicalLiteralPath);\r\n        let includePaths = [];\r\n        let excludePaths = [];\r\n        this.atPattern(start, include, {\r\n            "head": (data, htp, hlp, hop) => {\r\n                if (hop.length === depth) {\r\n                    includePaths.push({\r\n                        historicalTypePath: htp.slice(0, htp.length + lag),\r\n                        historicalLiteralPath: hlp.slice(0, htp.length + lag),\r\n                        historicalObjectPath: hop\r\n                    });\r\n                }\r\n                else if (hop.length === (depth + 1)) {\r\n                    excludePaths.push({\r\n                        historicalTypePath: htp,\r\n                        historicalLiteralPath: hlp,\r\n                        historicalObjectPath: hop\r\n                    });\r\n                    return false;\r\n                }\r\n            }\r\n        }, lag);\r\n        if (exclude) {\r\n            this.atPattern(start, exclude, {\r\n                "head": (data, excludehtp, excludehlp, excludehop) => {\r\n                    for (let i = 0; i < includePaths.length; i++) {\r\n                        let include = includePaths[i];\r\n                        let includehlp = include.historicalLiteralPath;\r\n                        if (includehlp.join("<===>").indexOf(excludehlp.join("<===>")) > -1) {\r\n                            includePaths.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                    excludePaths.push({\r\n                        historicalTypePath: excludehtp,\r\n                        historicalLiteralPath: excludehlp,\r\n                        historicalObjectPath: excludehop\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        let segments = [];\r\n        let excludeMap = {};\r\n        excludePaths.forEach(exclude => {\r\n            excludeMap[exclude.historicalLiteralPath.join("<===>")] = true;\r\n        });\r\n        includePaths.forEach((include) => {\r\n            let reference = this.pluck(start, include.historicalLiteralPath);\r\n            let clone = this.scaffold(reference);\r\n            this.atEvery(reference, (data, htp, hlp, root) => {\r\n                let curPath = include.historicalLiteralPath.concat(hlp).join("<===>");\r\n                if (curPath in excludeMap) {\r\n                    return false;\r\n                }\r\n                this.pluck(clone, hlp, this.clone(this.scaffold(data)));\r\n            });\r\n            segments.push({\r\n                data: clone,\r\n                historicalTypePath: include.historicalTypePath,\r\n                historicalLiteralPath: include.historicalLiteralPath,\r\n                historicalObjectPath: include.historicalObjectPath\r\n            });\r\n            logic(clone, include.historicalTypePath, include.historicalLiteralPath, include.historicalObjectPath, data);\r\n        });\r\n        return segments;\r\n    };\r\n    /* \tFunction Name: this.atMeta\r\n     *\tDescription: This function iterates through values which have matching literal/typepaths from the base of the object\r\n     */\r\n    this.atMeta = function (data, metaPath, logic, relativity = 0, historicalTypePath = [], historicalLiteralPath = [], historicalObjectPath = [], rootData = data) {\r\n        return this.atPattern(data, metaPath, { "head": logic }, relativity, historicalTypePath, historicalLiteralPath, null, data, true);\r\n    };\r\n    /*\tFunction Name: this.atPattern\r\n     *\tDescription: This function iterates through values which have matching literal/typepaths throughout the entirety of an object \r\n     */\r\n    this.atPattern = function (data, metaPath, logic, relativity = 0, historicalTypePath = [], historicalLiteralPath = [], curMeta, rootData = data, direct = false) {\r\n        let matched = {};\r\n        let aData;\r\n        let metaTemplate = {\r\n            matchCount: 0,\r\n            hop: []\r\n        };\r\n        let newMeta = [];\r\n        if (metaPath[0].constructor === Array) {\r\n            if (curMeta) { }\r\n            else {\r\n                newMeta = [];\r\n                for (let i = 0; i < metaPath.length; i++) {\r\n                    newMeta.push(this.clone(metaTemplate));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            metaPath = [metaPath];\r\n            newMeta = [metaTemplate];\r\n        }\r\n\r\n\r\n\r\n        if (historicalLiteralPath.length > 0) {\r\n            let matchExists = false;\r\n            for (let i = 0; i < metaPath.length; i++) {\r\n                newMeta[i] = {\r\n                    matchCount: this.clone(curMeta[i].matchCount),\r\n                    hop: curMeta[i].hop\r\n                };\r\n                if (direct && historicalLiteralPath.length > metaPath[i].length) {\r\n                    newMeta[i].matchCount = metaPath[i].length + 1;\r\n                }\r\n                if (metaPath[i][newMeta[i].matchCount] !== undefined && historicalTypePath[historicalTypePath.length - 1].name === metaPath[i][newMeta[i].matchCount].name) {\r\n                    newMeta[i].matchCount++;\r\n                    matchExists = true;\r\n                }\r\n                else if (metaPath[i][newMeta[i].matchCount] !== undefined && historicalLiteralPath[historicalLiteralPath.length - 1] === metaPath[i][newMeta[i].matchCount]) {\r\n                    newMeta[i].matchCount++;\r\n                    matchExists = true;\r\n                }\r\n                else {\r\n                    newMeta[i].matchCount = 0;\r\n                }\r\n                if (newMeta[i].matchCount === metaPath[i].length) {\r\n                    var continueTraversal;\r\n                    aData = relativity === 0 ? data : this.pluck(rootData, historicalLiteralPath.slice(0, (historicalLiteralPath.length) + relativity));\r\n                    newMeta[i].hop = newMeta[i].hop.concat([{ data: aData }]);\r\n                    let frozenHopIndex = newMeta[i].hop.length - 1;\r\n                    let frozenMetaIndex = this.clone(i);\r\n                    if (frozenHopIndex > 0) {\r\n                        newMeta[i].hop[frozenHopIndex].previous = () => {\r\n                            return newMeta[frozenMetaIndex].hop[frozenHopIndex - 1];\r\n                        };\r\n                        newMeta[i].hop[frozenHopIndex].previous().next = () => {\r\n                            return newMeta[frozenMetaIndex].hop[frozenHopIndex];\r\n                        };\r\n                    }\r\n                    continueTraversal = this.executeLogic(logic, "head", i, aData, historicalTypePath, historicalLiteralPath, newMeta[i].hop, rootData);\r\n                    matched[i] = aData;\r\n                    if (continueTraversal === false) {\r\n                        return aData;\r\n                    }\r\n                    newMeta[i].matchCount = 0;\r\n                }\r\n            }\r\n            if (direct && !matchExists) {\r\n                return false;\r\n            }\r\n        }\r\n        if (data !== null) {\r\n            if ((!direct) && this.isCircular(data)) {\r\n                console.log("data traversal halted @ " + historicalLiteralPath.join("-"))\r\n                return data;\r\n            }\r\n            var nhtpath = historicalTypePath.slice(0);\r\n            nhtpath.push(data.constructor);\r\n            if (data.constructor === Array) {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    let nhlpath = this.clone(historicalLiteralPath);\r\n                    nhlpath.push(i);\r\n                    this.atPattern(data[i], metaPath, logic, relativity, nhtpath, nhlpath, newMeta, rootData, direct);\r\n                }\r\n            }\r\n            else if (data.constructor === Object || (typeof data == \'object\' && data !== null)) {\r\n                if (data.constructor.name in this.typeExtensions) {\r\n                    this.typeExtensions[data.constructor.name].enumerators.forEach((enumerator) => {\r\n                        enumerator(data, metaPath, logic, relativity, nhtpath, historicalLiteralPath, newMeta, rootData, direct);\r\n                    });\r\n                }\r\n                else {\r\n                    Object.keys(data).forEach((key) => {\r\n                        let nhlpath = this.clone(historicalLiteralPath);\r\n                        nhlpath.push(key);\r\n                        this.atPattern(data[key], metaPath, logic, relativity, nhtpath, nhlpath, newMeta, rootData, direct);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < metaPath.length; i++) {\r\n            if (i in matched) {\r\n                continueTraversal = this.executeLogic(logic, "tail", i, aData, historicalTypePath, historicalLiteralPath, newMeta[i].hop, rootData);\r\n                if (continueTraversal === false) {\r\n                    return aData;\r\n                }\r\n            }\r\n        }\r\n        if (data === rootData) {\r\n            this.clearAccessMap();\r\n        }\r\n        return data;\r\n    };\r\n    /*\tFunction Name: this.atShallowestPattern\r\n     *\tDescription: This function iterates this.atPattern, stores the inputs with the least depth to be executed logically\r\n     */\r\n    this.atShallowestPattern = function (data, metaPath, logic, relativity = 0) {\r\n        var leastDepth = Infinity;\r\n        let inputs = [];\r\n        this.atPattern(data, metaPath, {\r\n            "head": function (input, historicalTypePath, historicalLiteralPath, historicalObjectPath) {\r\n                if (historicalLiteralPath.length < leastDepth) {\r\n                    leastDepth = historicalLiteralPath.length;\r\n                    inputs = [];\r\n                }\r\n                else if (historicalLiteralPath.length > leastDepth) {\r\n                    return false;\r\n                }\r\n                inputs.push({\r\n                    data: input,\r\n                    historicalTypePath: historicalTypePath,\r\n                    historicalLiteralPath: historicalLiteralPath,\r\n                    historicalObjectPath: historicalObjectPath\r\n                });\r\n            }\r\n        }, relativity);\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            logic(inputs[i].data, inputs[i].historicalTypePath, inputs[i].historicalLiteralPath, inputs[i].historicalObjectPath);\r\n        }\r\n        return data;\r\n    };\r\n    /*\tFunction Name: this.atDeepestPattern\r\n     *\tDescription: This function iterates this.atPattern, stores the inputs with most depth to be executed logically - (Returns false within .atPattern where depth is greater than)\r\n     */\r\n    this.atDeepestPattern = function (data, metaPath, logic, relativity = 0) {\r\n        var greatestDepth = -1;\r\n        let inputs = [];\r\n        this.atPattern(data, metaPath, function (input, historicalTypePath, historicalLiteralPath, historicalObjectPath) {\r\n            if (historicalLiteralPath.length > greatestDepth) {\r\n                greatestDepth = historicalLiteralPath.length;\r\n                inputs = [];\r\n            }\r\n            inputs.push({\r\n                data: input,\r\n                historicalTypePath: historicalTypePath,\r\n                historicalLiteralPath: historicalLiteralPath,\r\n                historicalObjectPath: historicalObjectPath\r\n            });\r\n        }, relativity);\r\n        for (let i = 0; i < inputs.length; i++) {\r\n            logic(inputs[i].data, inputs[i].historicalTypePath, inputs[i].historicalLiteralPath, inputs[i].historicalObjectPath);\r\n        }\r\n        return data;\r\n    };\r\n    /* \tFunction Name: this.atEnds\r\n     *\tDescription: This function iterates through the primitive ends of objects\r\n     */\r\n    this.atEnds = function (data, logic, historicalTypePath = [], historicalLiteralPath = []) {\r\n        if (data === null) {\r\n            logic(data, historicalTypePath, historicalLiteralPath);\r\n        }\r\n        else if (data.constructor === Object) {\r\n            Object.keys(data).forEach((key) => {\r\n                let ntp = historicalTypePath.concat([Object]);\r\n                let nlp = historicalLiteralPath.concat([key]);\r\n                this.atEnds(data[key], logic, ntp, nlp);\r\n            })\r\n        }\r\n        else if (data.constructor === Array) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                let ntp = historicalTypePath.concat([Array]);\r\n                let nlp = historicalLiteralPath.concat([i]);\r\n                this.atEnds(data[i], logic, ntp, nlp);\r\n            }\r\n        }\r\n        else if (data.constructor === Function) {\r\n            if (this.funcArgs(data).length === 0) {\r\n                let ntp = historicalTypePath.concat([Function]);\r\n                let nlp = historicalLiteralPath.concat(data);\r\n                this.atEnds(data(logic, ntp, nlp), logic, ntp, nlp)\r\n            }\r\n        }\r\n        else {\r\n            logic(data, historicalTypePath, historicalLiteralPath);\r\n        }\r\n        return data;\r\n    };\r\n    /*\tFunction Name: this.atEvery\r\n     * \tDescription: This function runs passed logic at every potential traversal or endpoint\r\n     */\r\n    this.atEvery = function (data, logic, historicalTypePath = [], historicalLiteralPath = [], rootData = data) {\r\n        let iContinue = logic(data, historicalTypePath, historicalLiteralPath, rootData);\r\n        if (!(iContinue === true || iContinue === undefined || iContinue === null)) {\r\n            return;\r\n        }\r\n        var newTypePath = this.clone(historicalTypePath);\r\n        newTypePath.push(data.constructor);\r\n        if (data === null){}\r\n        else if (data.constructor === Array) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                var newLitPath = this.clone(historicalLiteralPath);\r\n                newLitPath.push(i);\r\n                this.atEvery(data[i], logic, newTypePath, newLitPath, rootData);\r\n            }\r\n        }\r\n        else if (data.constructor === Object || (typeof data == \'object\')) {\r\n            Object.keys(data).forEach((key) => {\r\n                var newLitPath = this.clone(historicalLiteralPath);\r\n                newLitPath.push(key);\r\n                this.atEvery(data[key], logic, newTypePath, newLitPath, rootData);\r\n            });\r\n        }\r\n        return data;\r\n    };\r\n    /*\tFunction Name: this.atMetaEnds\r\n     * \tDescription: This function runs this.atMeta, and then performs logic at the ends of the object returned to it by this.atMeta\r\n     */\r\n    this.atMetaEnds = function (data, metaPath, logic) {\r\n        var recursiveRef = this;\r\n        recursiveRef.atMeta(data, metaPath, {\r\n            "head": function (input) {\r\n                recursiveRef.atEnds(input, logic);\r\n            }\r\n        });\r\n        return data;\r\n    };\r\n    /*\tFunction Name: this.atPatternEnds\r\n     *\tDescription: This function runs this.atPattern, and then performs logic at the pattern of the object returned to it by this.atPattern\r\n     */\r\n    this.atPatternEnds = function (data, metaPath, logic, relativity = 0) {\r\n        var recursiveRef = this;\r\n        recursiveRef.atPattern(data, metaPath, function (input) {\r\n            recursiveRef.atEnds(input, logic);\r\n        }, relativity);\r\n        return data;\r\n    };\r\n    /*\tFunction Name: this.atMatching\r\n     *\tDescription: This function traverses through set, determining if same path exists in data, and executes the associated path function "atMatchingFunction" or the sequence\r\n     */\r\n    this.atMatching = function (data, set, metaPath = [], literalPath = []) {\r\n        var curObj = this.pluck(set, metaPath);\r\n        var curData;\r\n        var exists = false;\r\n        try {\r\n            curData = this.pluck(data, metaPath);\r\n            exists = true;\r\n        }\r\n        catch (exception) {\r\n            exists = false;\r\n        }\r\n        if (curObj.constructor.name === "Object") {\r\n            Object.keys(curObj).forEach((key) => {\r\n                var nMetaPath = this.clone(metaPath);\r\n                nMetaPath.push(key);\r\n                var nLiteralPath = this.clone(literalPath);\r\n                nLiteralPath.push(key);\r\n                this.atMatching(data, set, nMetaPath, nLiteralPath);\r\n\r\n            });\r\n        }\r\n        else if (curObj.constructor.name === Array && exists) {\r\n            for (let i = 0; i < curObj.length; i++) {\r\n                var nMetaPath = this.clone(metaPath);\r\n                nMetaPath.push(i);\r\n                for (var x = 0; x < curData.length; x++) {\r\n                    var nLiteralPath = this.clone(literalPath);\r\n                    nLiteralPath.push(x);\r\n                    this.atMatching(data, set, nMetaPath, nLiteralPath);\r\n                }\r\n            }\r\n        }\r\n        else if (curObj.constructor === Function) {\r\n            if (metaPath[metaPath.length - 1] === "atMatchingFunction") {\r\n                //Perform Logic at Path of data object\r\n                curObj(this.pluck(data, literalPath.slice(0, - 1)), this)\r\n            }\r\n        }\r\n        else if (curObj.constructor.name === String) {\r\n            if (metaPath[metaPath.length - 1] === "atMatchingFunction") {\r\n                //Perform Logic at Path of data object\r\n                window[curObj](this.pluck(data, literalPath.slice(0, - 1)), this)\r\n            }\r\n            else if (exists) {\r\n                curData += curObj\r\n            }\r\n        }\r\n        else if (curObj.constructor === Number && exists) {\r\n            //Do an Equivalence Modifier\r\n            if (curData.constructor.name === curObj.constructor.name) {\r\n                curData += curObj;\r\n            }\r\n        }\r\n    };\r\n    /*\tFunction Name: this.atDepth\r\n     *\tDescription: This function traverses through set, pushing all items at a dimensional depth from base into an array and returning them\r\n     */\r\n    this.atDepth = function (data, depth = 0, logic, historicalTypePath = [], historicalLiteralPath = [], first = true, rootData = data) {\r\n        if (first === true) {\r\n            this.atDepthContainer = [];\r\n            first = false;\r\n        }\r\n        if (depth > 0) {\r\n            depth--\r\n            if (data.constructor.name === "Object") {\r\n                Object.keys(data).forEach((key) => {\r\n                    this.atDepth(data[key], depth, logic, first);\r\n                })\r\n            }\r\n            else if (data.constructor.name === "Array") {\r\n                for (let i = 0; i < data.length; i++) {\r\n                    this.atDepth(data[i], depth, logic, first);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            logic(data, historicalTypePath, historicalLiteralPath, rootData);\r\n            this.atDepthContainer.push(data);\r\n        }\r\n\r\n        return this.atDepthContainer;\r\n    };\r\n    /*\tFunction Name: this.atDiff\r\n     *\tDescription: This function traverses through multiple sets, keeping track of the structural and data differentials between all listed sets. Base sets must be held in array form. strict == true will modify contents to exactly match RFC 6902 standard\r\n     */\r\n    this.atDiff = function (data, logic = null, primary = 0, strict = false) {\r\n        let PatchDiffs = [];\r\n        if (data.constructor === Array) {\r\n            if (data.length > 1) {\r\n                //add, replace checks\r\n                this.atEvery(data[primary], (curData, historicalTypePath, historicalLiteralPath, rootData) => {\r\n                    for (var secondary = 0; secondary < data.length; secondary++) {\r\n                        if (secondary !== primary) {\r\n                            //compare primary set to others\r\n                            let secondaryPathExists = this.pathExists(data[secondary], historicalLiteralPath);\r\n                            if (secondaryPathExists && secondaryPathExists.constructor === Boolean) {\r\n                                if (curData.constructor !== Object && curData.constructor !== Array) {\r\n                                    let compareSetVal = this.pluck(data[secondary], historicalLiteralPath);\r\n                                    if (curData === compareSetVal) {\r\n                                        //set equivalent\r\n                                    }\r\n                                    else {\r\n                                        let nlp = historicalLiteralPath.slice(0);\r\n                                        //set requires updating to base set\r\n                                        let patch = this.RFC6902({ "op": "replace", "path": nlp, "value": curData, "ref": data[secondary], "#": secondary }, strict);\r\n                                        PatchDiffs.push(patch);\r\n                                        if (logic != null) {\r\n                                            logic(patch, historicalTypePath, historicalLiteralPath, rootData);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            else {\r\n                                let nlp = historicalLiteralPath.slice(0);\r\n                                let patch = this.RFC6902({ "op": "add", "path": nlp, "value": curData, "ref": data[secondary], "#": secondary }, strict);\r\n                                PatchDiffs.push(patch);\r\n                                if (logic != null) {\r\n                                    logic(patch, historicalTypePath, historicalLiteralPath, rootData);\r\n                                }\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                //removal checks\r\n                for (var secondary = 0; secondary < data.length; secondary++) {\r\n                    if (secondary !== primary) {\r\n                        this.atEvery(data[secondary], (curData, historicalTypePath, historicalLiteralPath, rootData) => {\r\n                            //compare secondary set to primary\r\n                            let primaryPathExists = this.pathExists(data[primary], historicalLiteralPath);\r\n                            if (!(primaryPathExists && primaryPathExists.constructor === Boolean)) {\r\n                                let nlp = historicalLiteralPath.slice(0);\r\n                                let patch = this.RFC6902({ "op": "remove", "path": nlp, "value": curData, "ref": data[secondary], "#": secondary }, strict);\r\n                                PatchDiffs.push(patch);\r\n                                if (logic != null) {\r\n                                    logic(patch, historicalTypePath, historicalLiteralPath, rootData);\r\n                                }\r\n                                return false;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                console.log("Nothing to compare against");\r\n            }\r\n        }\r\n        else {\r\n            console.log("Base data is not an array");\r\n        }\r\n        return PatchDiffs;\r\n    };\r\n    this.RFC6902 = function (patch, strict = false) {\r\n        if (strict) {\r\n            delete patch["ref"];\r\n            delete patch["#"];\r\n            patch["path"] = "/" + patch["path"].join("/");\r\n        }\r\n        return patch;\r\n    }\r\n})();\r\n\r\ntry {\r\n    module.exports = grul;\r\n    console.log("Node Load");\r\n}\r\ncatch (exception) {\r\n    grul.pluck = function (data, path, set = null) {\r\n        if (path.length > 1) {\r\n            return this.pluck(data[path[0]], path.slice(1), set);\r\n        }\r\n        else if (path.length === 0) {\r\n            if (set === null) {\r\n                return data;\r\n            }\r\n            else {\r\n                data = set;\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            if (set === null) {\r\n                if (data instanceof HTMLElement) {\r\n                    return data.getAttribute(path[0]);\r\n                }\r\n                else {\r\n                    return data[path[0]];\r\n                }\r\n            }\r\n            else {\r\n                data[path[0]] = set;\r\n                return data[path[0]];\r\n            }\r\n        }\r\n\r\n    };\r\n    console.log("Vanilla JavaScript Load");\r\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///826\n\n}')}}]);